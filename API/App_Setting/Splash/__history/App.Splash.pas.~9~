unit App.Splash;

interface

uses
{$REGION '  Import: Winapi''s .. '}
  Winapi.Windows
, Winapi.Messages
{$ENDREGION}

{$REGION '  Import: System''s .. '}
, System.SysUtils
, System.Variants
, System.Classes
{$ENDREGION}

{$REGION '  Import: Vcl''s .. '}
, Vcl.Graphics
, Vcl.Controls
, Vcl.Forms
, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls
{$ENDREGION}

, App.Settings.Interfaces, Vcl.ComCtrls
  ;

type

  TApp_Splash = class(TForm, I_Splash)
    Lbl_Log: TLabel;
    Pnl_Top: TPanel;
    Pnl_Bottom: TPanel;
    Pnl_Right: TPanel;
    Pnl_Left: TPanel;
    Progress_Extract: TProgressBar;
    Lbl_Progress: TLabel;
  {$ENDREGION}
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
  private
    [weak]
    fParent: I_AppSettings;
    { Private declarations }
  protected
    function LogControl: TControl;
    function ProgressControl: TControl;
    function ProgressBar: TControl;
    function Show_Splash: I_Splash;
    function &End(aWithClose: Boolean = False): I_AppSettings;
  public
    { Public declarations }
    constructor Create(aOwner: TComponent; aParent: I_AppSettings = nil); reintroduce; overload;
    destructor Destroy; override;
    class function New(aOwner: TComponent; aParent: I_AppSettings): I_Splash;
  end;

//var
//  ViewSplash: TViewSplash;

implementation

{$R *.dfm}

{ TViewSplash }

{$REGION '  [constructor||destructor] .. '}
constructor TApp_Splash.Create(aOwner: TComponent; aParent: I_AppSettings = nil);
begin inherited Create(aOwner);

  fParent := nil;

  if Assigned(aParent) then
    fParent := aParent;
end;

class function TApp_Splash.New(aOwner: TComponent; aParent: I_AppSettings): I_Splash;
begin
  Result := Self.Create(aOwner, aParent);
end;

destructor TApp_Splash.Destroy;
begin
//
  inherited;
end;
{$ENDREGION}

procedure TApp_Splash.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  Action := TCloseAction.caFree;
end;

function TApp_Splash.LogControl: TControl;
begin
  Result := TControl(Lbl_Log);
end;

function TApp_Splash.ProgressBar: TControl;
begin
  Result := TControl(Progress_Extract);
end;

function TApp_Splash.ProgressControl: TControl;
begin
  Result := TControl(Lbl_Progress);
end;

function TApp_Splash.Show_Splash: I_Splash;
begin
  Result := Self;

  Self.Show;
end;

function TApp_Splash.&End(aWithClose: Boolean): I_AppSettings;
begin
  Result := fParent;

  if aWithClose then
    Close;
end;

end.
