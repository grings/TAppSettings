unit View.Splash;

interface

uses
{$REGION '  Import: Winapi''s .. '}
  Winapi.Windows
, Winapi.Messages
{$ENDREGION}

{$REGION '  Import: System''s .. '}
, System.SysUtils
, System.Variants
, System.Classes
{$ENDREGION}

{$REGION '  Import: Vcl''s .. '}
, Vcl.Graphics
, Vcl.Controls
, Vcl.Forms
, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls
{$ENDREGION}
, API.AppSettings.Interfaces
  ;

type

  TViewSplash = class(TForm, I_Splash)
    Lbl_Progress: TLabel;
    Pnl_Top: TPanel;
    Pnl_Bottom: TPanel;
    Pnl_Right: TPanel;
    Pnl_Left: TPanel;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
  private
    [week]
    fParent: I_AppSettings;
    { Private declarations }
  protected
    procedure Show_Splash;
    procedure Close_Splash;
    function &End: I_AppSettings;
  public
    { Public declarations }
    constructor Create(aOwner: TComponent; aParent: I_AppSettings = nil); reintroduce; overload;
    destructor Destroy; override;
    class function New(aOwner: TComponent; aParent: I_AppSettings): I_Splash;
  end;

//var
//  ViewSplash: TViewSplash;

implementation

{$R *.dfm}

{ TViewSplash }

{$REGION '  [constructor||destructor] .. '}
constructor TViewSplash.Create(aOwner: TComponent; aParent: I_AppSettings = nil);
begin inherited Create(aOwner);

  fParent := nil;

  if Assigned(aParent) then
    fParent := aParent;
end;

class function TViewSplash.New(aOwner: TComponent; aParent: I_AppSettings): I_Splash;
begin
  Result := Self.Create(aOwner, aParent);
end;

destructor TViewSplash.Destroy;
begin
//
  inherited;
end;
{$ENDREGION}

procedure TViewSplash.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  Action := TCloseAction.caFree;
end;

procedure TViewSplash.Show_Splash;
begin
  Self.Show;
end;

procedure TViewSplash.Close_Splash;
begin
  Self.Close;
end;

function TViewSplash.&End: I_AppSettings;
begin
  Result := fParent;
end;

end.
