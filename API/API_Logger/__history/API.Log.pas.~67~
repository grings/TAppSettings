unit API.Log;

interface
uses
  Vcl.Controls
//
, API.Log.Interfaces
  ;

type
  TAppLog = class(TInterfacedObject, I_Log)
  private
    fCtrlDisplay: TControl;
  protected
    function Log(const aLog: string; aUseSleep_After: Boolean = True; aSleep: Byte = 100): I_Log;
    function LogProgress(const ProgressMsg: string;
                              var aProgressCtrl: TControl;
                              var aProgressBar: TControl;
                                  aProgValue, aMaxTotal: Cardinal): I_Log;
  public
    constructor Create(const aCtrlDisplay: TControl); reintroduce; overload;
    destructor Destroy; override;
    class function New(const aCtrlDisplay: TControl): I_Log;
  end;

implementation

uses
  System.SysUtils
, Vcl.ComCtrls
  ;

{ TLog }

{$REGION '  [constructor||destructor] .. '}
constructor TAppLog.Create(const aCtrlDisplay: TControl);
begin inherited Create;

  fCtrlDisplay := aCtrlDisplay;
end;

class function TAppLog.New(const aCtrlDisplay: TControl): I_Log;
begin
  Result := Self.Create(aCtrlDisplay);
end;

destructor TAppLog.Destroy;
begin
  inherited Destroy;
end;
{$ENDREGION}

//class procedure TAppLog.Progress(const ProgressMsg: string; aProgressCtrl: TControl;
//                                 aProgressBar: TProgressBar; aProgValue, aMaxTotal: Cardinal);
//begin
//  aProgressCtrl.Visible := True;
//  TControl(aProgressCtrl).Text := ProgressMsg;
//
//  aProgressBar.Visible  := True;
//  aProgressBar.Max      := aMaxTotal;
//  aProgressBar.Position := aProgValue;
//end;
type
  TControl = class(Vcl.Controls.TControl) // to Access private Methods (eSPECIALLY text or caption properties)!!!
  end;

function TAppLog.Log(const aLog: string; aUseSleep_After: Boolean; aSleep: Byte): I_Log;
begin
  Result := Self;

  if Assigned(fCtrlDisplay) then
    TControl(fCtrlDisplay).Text := aLog;

  if aUseSleep_After then
    Sleep(aSleep);

end;

function TAppLog.LogProgress(const ProgressMsg: string;
                              var aProgressCtrl: TControl;
                              var aProgressBar: TControl;
                                  aProgValue, aMaxTotal: Cardinal): I_Log;
begin
  Result := Self;

  aProgressCtrl.Visible := True;
  TControl(aProgressCtrl).Text := ProgressMsg;

  aProgressBar.Visible := True;
  TProgressBar(aProgressBar).Max      := aMaxTotal;
  TProgressBar(aProgressBar).Position := aProgValue;
end;

end.
